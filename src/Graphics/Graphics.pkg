
$#include <Graphics/Camera.h>
$#include <Graphics/GraphicsSystem.h>

namespace Core
{
	class Camera
	{
		Camera();

		void move(const Vec3& translation);
		void rotate(const Vec3& rotation);

		const Vec3& getPosition() const;
		const Vec3& getLookAtAxis() const;
		const Vec3& getUpAxis() const;
		const Vec3& getRotation() const;
		float getSpeed() const;

		void setPosition(const Vec3& pos);
		void setUpAxis(const Vec3& upAxis);
		void setLookAtAxis(const Vec3& lookAtAxis);
		void setRotation(const Vec3& rot);
		void setSpeed(float speed);
	};

	class GraphicsSystem
	{
		void begin();
		void present();

		bool initVertexShader(const char* shaderFile);
		bool initPixelShader(const char* shaderFile);
		
		Vec2 getTextureDimensions(const Texture& texture);
		void setBackgroundColor(float red, float green, float blue);
		void setCulling(bool isEnabled);
		void setTransparencyMode(bool isEnabled);

		void setOrthographicProjection();
		void setPerspectiveProjection();

		void applyCamera(const Camera& cam);
		void clearCamera();

		void drawLine(const Transform& transform, const Vec2* positions, uint32_t count, const Color& lineColor);
		void drawPolygon(const Transform& transform, const Vec2* positions, uint32_t count, const Color& fillColor);
		void drawPolygon(const Transform& transform, const Rect& rect, const Color& color);
		void drawQuad(const Transform& transform, const Vec2& halfSize, const Color& fillColor);
		void drawTexturedQuad(const Transform& transform, const Color& fillColor, const Image& image);

		void drawText(uint32_t fontID, const std::string& text, const Transform& tf, const Color& tint, uint32_t justify, bool italic);
	};
}