
$#include <Util/Color.h>
$#include <Util/Random.h>
$#include <Util/Rect.h>
$#include <Util/Time.h>
$#include <Util/Transform.h>
$#include <Util/Utility.h>
$#include <Util/Vec2.h>
$#include <Util/Vec3.h>

namespace Core
{
	inline std::string ResourcePath(const char* path);
	inline std::string ResourcePath(std::string& path);
	
	class Color
	{
		float r;
		float g;
		float b;
		float a;

		Color();
		Color(float r, float g, float b, float a = 1);

		void set(float r, float g, float b, float a = 1);
	};

	class Random
	{
		Random();
		Random(uint32_t seed);

		void reseed(uint32_t seed);

		int32_t randInt(int32_t lowerBound, int32_t upperBound);

		float randFloat();
	};

	class Rect
	{
		Rect();

		float left() const;
		float right() const;
		float top() const;
		float bottom() const;

		Vec2 center;
		float halfWidth;
		float halfHeight;
	};

	class Time
	{
		static const double STOP_TIME;
		static const double NORMAL_TIME;

		static uint64_t secondsToMicros(float sec);
		static uint64_t milisToMicros(uint32_t mili);
		static float milisToSeconds(uint32_t mili);
		static float microsToSeconds(uint64_t micros);
		static uint32_t secondsToMilis(float sec);
		static uint32_t microsToMilis(uint64_t micros);

		static uint32_t microsDelta(uint64_t start, uint64_t end);

		static uint32_t countMilisInMicros(uint64_t micros);
		static uint32_t countSecondsInMicros(uint64_t micros);
		static uint32_t countMinutesInMicros(uint64_t micros);
		static uint32_t countHoursInMicros(uint64_t micros);

		Time();

		void update();
		void updateBy(uint64_t delta);
		uint32_t getFixedStepUpdateCount(uint64_t frameTime, float& ratio, uint64_t& remainderTime);

		uint64_t getLastRealTimeMicros() const;
		uint64_t getRealTimeMicros() const;
		
		uint64_t getCurMicros() const;
		uint64_t getDeltaMicros() const;
		float getDeltaTime() const;

		void reset();
		
		void setTimeScale(double timeScale);
		double getTimeScale();
	};

	class Transform
	{
		Transform();

		Vec2 position;
		Vec2 scale;
		float rotation;
	};

	class Vec2
	{
		float x;
		float y;

		Vec2();
		Vec2(float x, float y);
		
		void set(float x, float y);

		Vec2 operator+(const Vec2& b) const;
		Vec2 operator-() const;
		Vec2 operator-(const Vec2& v) const;
		Vec2 operator*(float f) const;
		Vec2 operator/(float f) const;
	};

	class Vec3
	{
		float x;
		float y;
		float z;

		Vec3();
		Vec3(float x, float y, float z);

		void set(float x, float y, float z);

		Vec3 operator+(const Vec3& v) const;
		Vec3 operator-() const;
		Vec3 operator-(const Vec3& v) const;
		Vec3 operator*(float f) const;
		Vec3 operator/(float f) const;
	};
}