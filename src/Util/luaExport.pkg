
$#include <Util/Color.h>
$#include <Util/Dimensional.h>
$#include <Util/Random.h>
$#include <Util/Time.h>
$#include <Util/Transform.h>

namespace Core
{
	class Color
	{
		float r, g, b, a;

		Color();
		Color(float r, float g, float b);

		void set(float r, float g, float b);
	};

	class Vec2
	{
		float x, y;

		Vec2();
		Vec2(float x, float y);
		
		void set(float x, float y);

		/* these are inside the class for tolua++ binding compatibility */
		Vec2 operator+(const Vec2& b) const;
		Vec2 operator-() const;
		Vec2 operator-(const Vec2& v) const;
		Vec2 operator*(float f) const;
		Vec2 operator/(float f) const;
	};

	class Random
	{
		Random();
		Random(uint32_t seed);

		//change the seed
		void reseed(uint32_t seed);

		//in interval between bounds
		int32_t randInt(int32_t lowerBound, int32_t upperBound);

		//in interval between 0 and 1
		float randFloat();
	};

	class Time
	{
		static const double STOP_TIME;
		static const double NORMAL_TIME;

		static uint64_t microsFromSeconds(uint32_t sec);
		static uint64_t microsFromMilis(uint32_t mili);

		Time();

		void update(double virtualTimeScale);
		void updateBy(uint64_t delta, double virtualTimeScale);
		uint32_t getFixedStepUpdateCount(uint64_t frameTime, float& ratio, uint64_t& remainderTime);

		uint64_t getLastRealTimeMicros() const;
		uint64_t getRealTimeMicros() const;
		
		uint64_t getCurMicros() const;
		uint64_t getDeltaMicros() const;
		float getDeltaTime() const;

		uint64_t getVirtCurMicros() const;
		uint64_t getVirtDeltaMicros() const;
		float getVirtDeltaTime() const;
	};

	class Transform
	{
		Transform();

		Vec2 position;
		Vec2 scale;
		float rotation;
	};
}